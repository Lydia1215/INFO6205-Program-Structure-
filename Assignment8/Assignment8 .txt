1.class Solution {
    public int[] getShortestPaths(int[][] matrix) {
	int length = matrix.length;
        int[] res = new int[length];  
        boolean[] flag = new boolean[length];  
        flag[0] = true;  
        for(int i = 1;i < length;i++) {
            flag[i] = false;
        }
        for(int i = 1;i < length;i++) {
            res[i] = matrix[0][i];
        }
        for(int i = 1;i < length;i++) {
            int min = Integer.MAX_VALUE;    
            int k = 0;
            for(int j = 1;j < length;j++) {  
                if(!flag[j] && res[j] != -1 && min > res[j]) {
                    min = res[j];
                    k = j;
                }
            }
            flag[k] = true;    
            for(int j = 1;j < length;j++) {  
                if(!flag[j]) {  
                    if(matrix[k][j] != -1 && (res[j] > min + matrix[k][j] || res[j] == -1))
                        res[j] = min + matrix[k][j];
                }
            }
        }
        return res;
    }
}
2.class Solution {
    public boolean canFinishUtil(int numCourses, ArrayList<Integer> adjust[],int []indegree){
        boolean flag = false;
        boolean allFlag = true;
        for(int i = 0;i < numCourses;i++){
            if(indegree[i]==0) flag = true;
            if(indegree[i]>=0) allFlag = false;
        }
        if(allFlag)
            return true;
        if(!flag)
            return false;
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                indegree[i]=-1;
                for(int n: adjust[i]){
                    indegree[n]--;
                }
            }
	    if(indegree[i]<0) continue;
        }
        return canFinishUtil(numCourses, adjust, indegree);
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Integer> adjust[]=new ArrayList[numCourses];
        int[] indegree=new int[numCourses];
        for(int i=0;i<numCourses;i++) 
		adjust[i]=new ArrayList<Integer>();
        for(int e[]: prerequisites){
            adjust[e[1]].add(e[0]);
            indegree[e[0]]++;
        }
        return canFinishUtil(numCourses, adjust, indegree);
    }
}
3. class Solution {
    public int ladderlen(String beginWord, String endWord, List<String> wordList) {
        Queue<String> c = new ArrayDeque<>();
	Set<String> d = new HashSet<>(wordList);
        int len = 0;
        
	c.add(beginWord);
        d.remove(beginWord);
        
        while (!c.isEmpty()) {
            len++;
            int size = c.size();
            for(int i = 0;i < size;i--) {
                String word = c.remove();
                if (word.equals(endWord)) 
                    return len;
                for (int i = 0; i < word.len(); i++) {
                    for (char c = 'a'; c <= 'z'; c++) {
                        if (d.remove(word.substring(0, i) + c + word.substring(i + 1, word.len()))) {
                            c.add(word.substring(0, i) + c + word.substring(i + 1, word.len()));
                        }
                    }
                }
            }
        }
        return 0;
    }
}
4. class Solution {
    public int numIslands(char[][] grid) {
        if(grid != null && grid.length != 0){
        	int n = grid.length;
        	int m = grid[0].length;
        	boolean visited[][] = new boolean[n][m];
        	int count = 0;
        	for(int i = 0; i < n; i++){
            		for(int j = 0; j < m; j++){
                		if(visited[i][j] || grid[i][j] == '0')
                    			continue;
                		count++;
                		dfs(i, j, grid, visited, n, m);
            		}
        	}
        	return count;
	}else{
		return 0;
	}
    }
    void dfs(int i, int j, char[][] grid, boolean[][] visited, int n, int m){
        if(i<0 || i>=n || j<0 || j>=m || visited[i][j])
            return;
        if(grid[i][j] == '0'){
            visited[i][j] = true;
            return;
        }
        visited[i][j] = true;
        dfs(i+1, j, grid, visited, n, m);
        dfs(i-1, j, grid, visited, n, m);
        dfs(i, j+1, grid, visited, n, m);
        dfs(i, j-1, grid, visited, n, m);
    }
}